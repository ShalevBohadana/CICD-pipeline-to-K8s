# 🚀 CI/CD Pipeline to Kubernetes on AWS


> **Portfolio Project** • end-to-end DevOps pipeline that builds, tests, and deploys a Node.js “Hello World” service onto AWS EKS using Terraform, Jenkins, and Argo CD.  

---

## ✨ Project Overview

This repository demonstrates an enterprise-grade CI/CD workflow:

1. **Infrastructure as Code**  
   - **Terraform** modules define a production VPC (public & private subnets, NAT gateway, routing), an EKS cluster with worker node groups, an ECR registry, and a Jenkins CI server.  
   - Remote state is stored in S3 + DynamoDB with lifecycle and locking policies.  
   - A two-phase “bootstrap” pattern separates IAM role creation from workload provisioning, avoiding circular dependencies and enforcing least-privilege.

2. **Continuous Integration**  
   - **Jenkins** runs in a private Dev VPC. A declarative `Jenkinsfile` checkout, builds the Node.js app, runs tests, builds a Docker image, and pushes it to ECR.

3. **Continuous Delivery & GitOps**  
   - **Argo CD** in the EKS cluster watches the `k8s/` folder in Git.  
   - Any updates to Kubernetes manifests (Deployment, Service) automatically reconcile the live cluster to your desired state.

4. **Application Best Practices**  
   - Namespaced deployment (`production`) with rolling updates.  
   - Resource requests/limits, readiness & liveness probes.  
   - Pod anti-affinity for high availability.  
   - Non-root containers and fine-grained IAM roles for security.




## 🌲 Repository Layout

```text
📦 ci-cd-pipeline-to-k8s
├── 📂 app/                    # Node.js “Hello World” service
│   ├── Dockerfile
│   └── src/index.js          # Simple Express server
├── 📂 k8s/                    # Kubernetes manifests (YAML)
│   ├── deployment.yaml
│   └── service.yaml
├── 📂 infra/                  # Terraform infrastructure
│   ├── 📂 state/              # Terraform remote‐state (S3 & DynamoDB)
│   ├── 📂 bootstrap/          # IAM role bootstrap for Terraform/Jenkins
│   ├── 📂 modules/            # Reusable modules: vpc, eks, ecr, jenkins
│   ├── backend.hcl            # Remote‐state config
│   ├── providers.tf           # AWS provider (assume-role for CI)
│   ├── main.tf                # Root module orchestration
│   ├── variables.tf           # Root variables
│   ├── locals.tf              # Common locals (tags, naming)
│   └── outputs.tf             # Exposed outputs
├── 📄 Jenkinsfile             # Jenkins pipeline definition
└── 📄 README.md               # Project overview
```

## 📚 Next Steps & Roadmap

* [ ] Install and configure **Argo CD** in EKS
* [ ] Add **Horizontal Pod Autoscaler** for sample-app
* [ ] Secure Jenkins behind an **Application Load Balancer** + IAM auth
* [ ] Implement **unit and integration tests** in the Jenkins pipeline
* [ ] Configure **monitoring & alerts** (Prometheus + Grafana)

---

> ⚠️ **Work in Progress**
> This README and the accompanying Terraform & CI/CD setup are ongoing—expect updates and improvements!

---

> *Crafted by Shalev Bohadana as a portfolio project demonstrating enterprise-grade DevOps practices.*
